// Code generated by protoc-gen-gogo.
// source: keelhaul.proto
// DO NOT EDIT!

package service

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/opsee/protobuf/opseeproto"
import _ "github.com/opsee/protobuf/opseeproto/types"
import opsee "github.com/opsee/basic/schema"
import opsee1 "github.com/opsee/basic/schema"
import opsee3 "github.com/opsee/basic/schema"
import _ "github.com/opsee/basic/schema/aws/ec2"

import github_com_graphql_go_graphql "github.com/graphql-go/graphql"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Filter struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptorKeelhaul, []int{0} }

type ListBastionStatesRequest struct {
	CustomerIds []string  `protobuf:"bytes,1,rep,name=customer_ids,json=customerIds" json:"customer_ids,omitempty"`
	Filters     []*Filter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *ListBastionStatesRequest) Reset()                    { *m = ListBastionStatesRequest{} }
func (m *ListBastionStatesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBastionStatesRequest) ProtoMessage()               {}
func (*ListBastionStatesRequest) Descriptor() ([]byte, []int) { return fileDescriptorKeelhaul, []int{1} }

func (m *ListBastionStatesRequest) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ListBastionStatesResponse struct {
	BastionStates []*opsee.BastionState `protobuf:"bytes,1,rep,name=bastion_states,json=bastionStates" json:"bastion_states,omitempty"`
}

func (m *ListBastionStatesResponse) Reset()         { *m = ListBastionStatesResponse{} }
func (m *ListBastionStatesResponse) String() string { return proto.CompactTextString(m) }
func (*ListBastionStatesResponse) ProtoMessage()    {}
func (*ListBastionStatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorKeelhaul, []int{2}
}

func (m *ListBastionStatesResponse) GetBastionStates() []*opsee.BastionState {
	if m != nil {
		return m.BastionStates
	}
	return nil
}

type ScanVpcsRequest struct {
	User   *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Region string       `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (m *ScanVpcsRequest) Reset()                    { *m = ScanVpcsRequest{} }
func (m *ScanVpcsRequest) String() string            { return proto.CompactTextString(m) }
func (*ScanVpcsRequest) ProtoMessage()               {}
func (*ScanVpcsRequest) Descriptor() ([]byte, []int) { return fileDescriptorKeelhaul, []int{3} }

func (m *ScanVpcsRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type ScanVpcsResponse struct {
	Region *opsee3.Region `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
}

func (m *ScanVpcsResponse) Reset()                    { *m = ScanVpcsResponse{} }
func (m *ScanVpcsResponse) String() string            { return proto.CompactTextString(m) }
func (*ScanVpcsResponse) ProtoMessage()               {}
func (*ScanVpcsResponse) Descriptor() ([]byte, []int) { return fileDescriptorKeelhaul, []int{4} }

func (m *ScanVpcsResponse) GetRegion() *opsee3.Region {
	if m != nil {
		return m.Region
	}
	return nil
}

type LaunchStackRequest struct {
	User             *opsee1.User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Region           string       `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	VpcId            string       `protobuf:"bytes,5,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	SubnetId         string       `protobuf:"bytes,6,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	InstanceSize     string       `protobuf:"bytes,7,opt,name=instance_size,json=instanceSize,proto3" json:"instance_size,omitempty"`
	SubnetRouting    string       `protobuf:"bytes,8,opt,name=subnet_routing,json=subnetRouting,proto3" json:"subnet_routing,omitempty"`
	ExecutionGroupId string       `protobuf:"bytes,9,opt,name=execution_group_id,json=executionGroupId,proto3" json:"execution_group_id,omitempty"`
}

func (m *LaunchStackRequest) Reset()                    { *m = LaunchStackRequest{} }
func (m *LaunchStackRequest) String() string            { return proto.CompactTextString(m) }
func (*LaunchStackRequest) ProtoMessage()               {}
func (*LaunchStackRequest) Descriptor() ([]byte, []int) { return fileDescriptorKeelhaul, []int{5} }

func (m *LaunchStackRequest) GetUser() *opsee1.User {
	if m != nil {
		return m.User
	}
	return nil
}

type LaunchStackResponse struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId,proto3" json:"stack_id,omitempty"`
}

func (m *LaunchStackResponse) Reset()                    { *m = LaunchStackResponse{} }
func (m *LaunchStackResponse) String() string            { return proto.CompactTextString(m) }
func (*LaunchStackResponse) ProtoMessage()               {}
func (*LaunchStackResponse) Descriptor() ([]byte, []int) { return fileDescriptorKeelhaul, []int{6} }

type AuthenticateBastionRequest struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *AuthenticateBastionRequest) Reset()         { *m = AuthenticateBastionRequest{} }
func (m *AuthenticateBastionRequest) String() string { return proto.CompactTextString(m) }
func (*AuthenticateBastionRequest) ProtoMessage()    {}
func (*AuthenticateBastionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorKeelhaul, []int{7}
}

type AuthenticateBastionResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *AuthenticateBastionResponse) Reset()         { *m = AuthenticateBastionResponse{} }
func (m *AuthenticateBastionResponse) String() string { return proto.CompactTextString(m) }
func (*AuthenticateBastionResponse) ProtoMessage()    {}
func (*AuthenticateBastionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorKeelhaul, []int{8}
}

func init() {
	proto.RegisterType((*Filter)(nil), "opsee.Filter")
	proto.RegisterType((*ListBastionStatesRequest)(nil), "opsee.ListBastionStatesRequest")
	proto.RegisterType((*ListBastionStatesResponse)(nil), "opsee.ListBastionStatesResponse")
	proto.RegisterType((*ScanVpcsRequest)(nil), "opsee.ScanVpcsRequest")
	proto.RegisterType((*ScanVpcsResponse)(nil), "opsee.ScanVpcsResponse")
	proto.RegisterType((*LaunchStackRequest)(nil), "opsee.LaunchStackRequest")
	proto.RegisterType((*LaunchStackResponse)(nil), "opsee.LaunchStackResponse")
	proto.RegisterType((*AuthenticateBastionRequest)(nil), "opsee.AuthenticateBastionRequest")
	proto.RegisterType((*AuthenticateBastionResponse)(nil), "opsee.AuthenticateBastionResponse")
}
func (this *Filter) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Filter)
	if !ok {
		that2, ok := that.(Filter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *ListBastionStatesRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListBastionStatesRequest)
	if !ok {
		that2, ok := that.(ListBastionStatesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.CustomerIds) != len(that1.CustomerIds) {
		return false
	}
	for i := range this.CustomerIds {
		if this.CustomerIds[i] != that1.CustomerIds[i] {
			return false
		}
	}
	if len(this.Filters) != len(that1.Filters) {
		return false
	}
	for i := range this.Filters {
		if !this.Filters[i].Equal(that1.Filters[i]) {
			return false
		}
	}
	return true
}
func (this *ListBastionStatesResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ListBastionStatesResponse)
	if !ok {
		that2, ok := that.(ListBastionStatesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.BastionStates) != len(that1.BastionStates) {
		return false
	}
	for i := range this.BastionStates {
		if !this.BastionStates[i].Equal(that1.BastionStates[i]) {
			return false
		}
	}
	return true
}
func (this *ScanVpcsRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScanVpcsRequest)
	if !ok {
		that2, ok := that.(ScanVpcsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	return true
}
func (this *ScanVpcsResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*ScanVpcsResponse)
	if !ok {
		that2, ok := that.(ScanVpcsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Region.Equal(that1.Region) {
		return false
	}
	return true
}
func (this *LaunchStackRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LaunchStackRequest)
	if !ok {
		that2, ok := that.(LaunchStackRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.User.Equal(that1.User) {
		return false
	}
	if this.Region != that1.Region {
		return false
	}
	if this.VpcId != that1.VpcId {
		return false
	}
	if this.SubnetId != that1.SubnetId {
		return false
	}
	if this.InstanceSize != that1.InstanceSize {
		return false
	}
	if this.SubnetRouting != that1.SubnetRouting {
		return false
	}
	if this.ExecutionGroupId != that1.ExecutionGroupId {
		return false
	}
	return true
}
func (this *LaunchStackResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*LaunchStackResponse)
	if !ok {
		that2, ok := that.(LaunchStackResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.StackId != that1.StackId {
		return false
	}
	return true
}
func (this *AuthenticateBastionRequest) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateBastionRequest)
	if !ok {
		that2, ok := that.(AuthenticateBastionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Password != that1.Password {
		return false
	}
	return true
}
func (this *AuthenticateBastionResponse) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*AuthenticateBastionResponse)
	if !ok {
		that2, ok := that.(AuthenticateBastionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}

type FilterGetter interface {
	GetFilter() *Filter
}

var GraphQLFilterType *github_com_graphql_go_graphql.Object

type ListBastionStatesRequestGetter interface {
	GetListBastionStatesRequest() *ListBastionStatesRequest
}

var GraphQLListBastionStatesRequestType *github_com_graphql_go_graphql.Object

type ListBastionStatesResponseGetter interface {
	GetListBastionStatesResponse() *ListBastionStatesResponse
}

var GraphQLListBastionStatesResponseType *github_com_graphql_go_graphql.Object

type ScanVpcsRequestGetter interface {
	GetScanVpcsRequest() *ScanVpcsRequest
}

var GraphQLScanVpcsRequestType *github_com_graphql_go_graphql.Object

type ScanVpcsResponseGetter interface {
	GetScanVpcsResponse() *ScanVpcsResponse
}

var GraphQLScanVpcsResponseType *github_com_graphql_go_graphql.Object

type LaunchStackRequestGetter interface {
	GetLaunchStackRequest() *LaunchStackRequest
}

var GraphQLLaunchStackRequestType *github_com_graphql_go_graphql.Object

type LaunchStackResponseGetter interface {
	GetLaunchStackResponse() *LaunchStackResponse
}

var GraphQLLaunchStackResponseType *github_com_graphql_go_graphql.Object

type AuthenticateBastionRequestGetter interface {
	GetAuthenticateBastionRequest() *AuthenticateBastionRequest
}

var GraphQLAuthenticateBastionRequestType *github_com_graphql_go_graphql.Object

type AuthenticateBastionResponseGetter interface {
	GetAuthenticateBastionResponse() *AuthenticateBastionResponse
}

var GraphQLAuthenticateBastionResponseType *github_com_graphql_go_graphql.Object

func init() {
	GraphQLFilterType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceFilter",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"key": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Filter)
						if ok {
							return obj.Key, nil
						}
						inter, ok := p.Source.(FilterGetter)
						if ok {
							face := inter.GetFilter()
							if face == nil {
								return nil, nil
							}
							return face.Key, nil
						}
						return nil, fmt.Errorf("field key not resolved")
					},
				},
				"value": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*Filter)
						if ok {
							return obj.Value, nil
						}
						inter, ok := p.Source.(FilterGetter)
						if ok {
							face := inter.GetFilter()
							if face == nil {
								return nil, nil
							}
							return face.Value, nil
						}
						return nil, fmt.Errorf("field value not resolved")
					},
				},
			}
		}),
	})
	GraphQLListBastionStatesRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListBastionStatesRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"customer_ids": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(github_com_graphql_go_graphql.String),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListBastionStatesRequest)
						if ok {
							return obj.CustomerIds, nil
						}
						inter, ok := p.Source.(ListBastionStatesRequestGetter)
						if ok {
							face := inter.GetListBastionStatesRequest()
							if face == nil {
								return nil, nil
							}
							return face.CustomerIds, nil
						}
						return nil, fmt.Errorf("field customer_ids not resolved")
					},
				},
				"filters": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(GraphQLFilterType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListBastionStatesRequest)
						if ok {
							return obj.Filters, nil
						}
						inter, ok := p.Source.(ListBastionStatesRequestGetter)
						if ok {
							face := inter.GetListBastionStatesRequest()
							if face == nil {
								return nil, nil
							}
							return face.Filters, nil
						}
						return nil, fmt.Errorf("field filters not resolved")
					},
				},
			}
		}),
	})
	GraphQLListBastionStatesResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceListBastionStatesResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"bastion_states": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.NewList(opsee.GraphQLBastionStateType),
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ListBastionStatesResponse)
						if ok {
							return obj.BastionStates, nil
						}
						inter, ok := p.Source.(ListBastionStatesResponseGetter)
						if ok {
							face := inter.GetListBastionStatesResponse()
							if face == nil {
								return nil, nil
							}
							return face.BastionStates, nil
						}
						return nil, fmt.Errorf("field bastion_states not resolved")
					},
				},
			}
		}),
	})
	GraphQLScanVpcsRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceScanVpcsRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(ScanVpcsRequestGetter)
						if ok {
							face := inter.GetScanVpcsRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsRequest)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(ScanVpcsRequestGetter)
						if ok {
							face := inter.GetScanVpcsRequest()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
			}
		}),
	})
	GraphQLScanVpcsResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceScanVpcsResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"region": &github_com_graphql_go_graphql.Field{
					Type:        opsee3.GraphQLRegionType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*ScanVpcsResponse)
						if ok {
							if obj.Region == nil {
								return nil, nil
							}
							return obj.GetRegion(), nil
						}
						inter, ok := p.Source.(ScanVpcsResponseGetter)
						if ok {
							face := inter.GetScanVpcsResponse()
							if face == nil {
								return nil, nil
							}
							if face.Region == nil {
								return nil, nil
							}
							return face.GetRegion(), nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
			}
		}),
	})
	GraphQLLaunchStackRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceLaunchStackRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"user": &github_com_graphql_go_graphql.Field{
					Type:        opsee1.GraphQLUserType,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							if obj.User == nil {
								return nil, nil
							}
							return obj.GetUser(), nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							if face.User == nil {
								return nil, nil
							}
							return face.GetUser(), nil
						}
						return nil, fmt.Errorf("field user not resolved")
					},
				},
				"region": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.Region, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.Region, nil
						}
						return nil, fmt.Errorf("field region not resolved")
					},
				},
				"vpc_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.VpcId, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.VpcId, nil
						}
						return nil, fmt.Errorf("field vpc_id not resolved")
					},
				},
				"subnet_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.SubnetId, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.SubnetId, nil
						}
						return nil, fmt.Errorf("field subnet_id not resolved")
					},
				},
				"instance_size": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.InstanceSize, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.InstanceSize, nil
						}
						return nil, fmt.Errorf("field instance_size not resolved")
					},
				},
				"subnet_routing": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.SubnetRouting, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.SubnetRouting, nil
						}
						return nil, fmt.Errorf("field subnet_routing not resolved")
					},
				},
				"execution_group_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackRequest)
						if ok {
							return obj.ExecutionGroupId, nil
						}
						inter, ok := p.Source.(LaunchStackRequestGetter)
						if ok {
							face := inter.GetLaunchStackRequest()
							if face == nil {
								return nil, nil
							}
							return face.ExecutionGroupId, nil
						}
						return nil, fmt.Errorf("field execution_group_id not resolved")
					},
				},
			}
		}),
	})
	GraphQLLaunchStackResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceLaunchStackResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"stack_id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*LaunchStackResponse)
						if ok {
							return obj.StackId, nil
						}
						inter, ok := p.Source.(LaunchStackResponseGetter)
						if ok {
							face := inter.GetLaunchStackResponse()
							if face == nil {
								return nil, nil
							}
							return face.StackId, nil
						}
						return nil, fmt.Errorf("field stack_id not resolved")
					},
				},
			}
		}),
	})
	GraphQLAuthenticateBastionRequestType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceAuthenticateBastionRequest",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"id": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AuthenticateBastionRequest)
						if ok {
							return obj.Id, nil
						}
						inter, ok := p.Source.(AuthenticateBastionRequestGetter)
						if ok {
							face := inter.GetAuthenticateBastionRequest()
							if face == nil {
								return nil, nil
							}
							return face.Id, nil
						}
						return nil, fmt.Errorf("field id not resolved")
					},
				},
				"password": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.String,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AuthenticateBastionRequest)
						if ok {
							return obj.Password, nil
						}
						inter, ok := p.Source.(AuthenticateBastionRequestGetter)
						if ok {
							face := inter.GetAuthenticateBastionRequest()
							if face == nil {
								return nil, nil
							}
							return face.Password, nil
						}
						return nil, fmt.Errorf("field password not resolved")
					},
				},
			}
		}),
	})
	GraphQLAuthenticateBastionResponseType = github_com_graphql_go_graphql.NewObject(github_com_graphql_go_graphql.ObjectConfig{
		Name:        "serviceAuthenticateBastionResponse",
		Description: "",
		Fields: (github_com_graphql_go_graphql.FieldsThunk)(func() github_com_graphql_go_graphql.Fields {
			return github_com_graphql_go_graphql.Fields{
				"success": &github_com_graphql_go_graphql.Field{
					Type:        github_com_graphql_go_graphql.Boolean,
					Description: "",
					Resolve: func(p github_com_graphql_go_graphql.ResolveParams) (interface{}, error) {
						obj, ok := p.Source.(*AuthenticateBastionResponse)
						if ok {
							return obj.Success, nil
						}
						inter, ok := p.Source.(AuthenticateBastionResponseGetter)
						if ok {
							face := inter.GetAuthenticateBastionResponse()
							if face == nil {
								return nil, nil
							}
							return face.Success, nil
						}
						return nil, fmt.Errorf("field success not resolved")
					},
				},
			}
		}),
	})
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Keelhaul service

type KeelhaulClient interface {
	ListBastionStates(ctx context.Context, in *ListBastionStatesRequest, opts ...grpc.CallOption) (*ListBastionStatesResponse, error)
	ScanVpcs(ctx context.Context, in *ScanVpcsRequest, opts ...grpc.CallOption) (*ScanVpcsResponse, error)
	LaunchStack(ctx context.Context, in *LaunchStackRequest, opts ...grpc.CallOption) (*LaunchStackResponse, error)
	AuthenticateBastion(ctx context.Context, in *AuthenticateBastionRequest, opts ...grpc.CallOption) (*AuthenticateBastionResponse, error)
}

type keelhaulClient struct {
	cc *grpc.ClientConn
}

func NewKeelhaulClient(cc *grpc.ClientConn) KeelhaulClient {
	return &keelhaulClient{cc}
}

func (c *keelhaulClient) ListBastionStates(ctx context.Context, in *ListBastionStatesRequest, opts ...grpc.CallOption) (*ListBastionStatesResponse, error) {
	out := new(ListBastionStatesResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/ListBastionStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keelhaulClient) ScanVpcs(ctx context.Context, in *ScanVpcsRequest, opts ...grpc.CallOption) (*ScanVpcsResponse, error) {
	out := new(ScanVpcsResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/ScanVpcs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keelhaulClient) LaunchStack(ctx context.Context, in *LaunchStackRequest, opts ...grpc.CallOption) (*LaunchStackResponse, error) {
	out := new(LaunchStackResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/LaunchStack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keelhaulClient) AuthenticateBastion(ctx context.Context, in *AuthenticateBastionRequest, opts ...grpc.CallOption) (*AuthenticateBastionResponse, error) {
	out := new(AuthenticateBastionResponse)
	err := grpc.Invoke(ctx, "/opsee.Keelhaul/AuthenticateBastion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Keelhaul service

type KeelhaulServer interface {
	ListBastionStates(context.Context, *ListBastionStatesRequest) (*ListBastionStatesResponse, error)
	ScanVpcs(context.Context, *ScanVpcsRequest) (*ScanVpcsResponse, error)
	LaunchStack(context.Context, *LaunchStackRequest) (*LaunchStackResponse, error)
	AuthenticateBastion(context.Context, *AuthenticateBastionRequest) (*AuthenticateBastionResponse, error)
}

func RegisterKeelhaulServer(s *grpc.Server, srv KeelhaulServer) {
	s.RegisterService(&_Keelhaul_serviceDesc, srv)
}

func _Keelhaul_ListBastionStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBastionStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeelhaulServer).ListBastionStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Keelhaul/ListBastionStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeelhaulServer).ListBastionStates(ctx, req.(*ListBastionStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keelhaul_ScanVpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanVpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeelhaulServer).ScanVpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Keelhaul/ScanVpcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeelhaulServer).ScanVpcs(ctx, req.(*ScanVpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keelhaul_LaunchStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchStackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeelhaulServer).LaunchStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Keelhaul/LaunchStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeelhaulServer).LaunchStack(ctx, req.(*LaunchStackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keelhaul_AuthenticateBastion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateBastionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeelhaulServer).AuthenticateBastion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opsee.Keelhaul/AuthenticateBastion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeelhaulServer).AuthenticateBastion(ctx, req.(*AuthenticateBastionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Keelhaul_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opsee.Keelhaul",
	HandlerType: (*KeelhaulServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBastionStates",
			Handler:    _Keelhaul_ListBastionStates_Handler,
		},
		{
			MethodName: "ScanVpcs",
			Handler:    _Keelhaul_ScanVpcs_Handler,
		},
		{
			MethodName: "LaunchStack",
			Handler:    _Keelhaul_LaunchStack_Handler,
		},
		{
			MethodName: "AuthenticateBastion",
			Handler:    _Keelhaul_AuthenticateBastion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorKeelhaul,
}

func (m *Filter) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Filter) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.Key)))
		i += copy(data[i:], m.Key)
	}
	if len(m.Value) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.Value)))
		i += copy(data[i:], m.Value)
	}
	return i, nil
}

func (m *ListBastionStatesRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListBastionStatesRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CustomerIds) > 0 {
		for _, s := range m.CustomerIds {
			data[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Filters) > 0 {
		for _, msg := range m.Filters {
			data[i] = 0x12
			i++
			i = encodeVarintKeelhaul(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListBastionStatesResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ListBastionStatesResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BastionStates) > 0 {
		for _, msg := range m.BastionStates {
			data[i] = 0xa
			i++
			i = encodeVarintKeelhaul(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ScanVpcsRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScanVpcsRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintKeelhaul(data, i, uint64(m.User.Size()))
		n1, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Region) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.Region)))
		i += copy(data[i:], m.Region)
	}
	return i, nil
}

func (m *ScanVpcsResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScanVpcsResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Region != nil {
		data[i] = 0xa
		i++
		i = encodeVarintKeelhaul(data, i, uint64(m.Region.Size()))
		n2, err := m.Region.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *LaunchStackRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LaunchStackRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		data[i] = 0xa
		i++
		i = encodeVarintKeelhaul(data, i, uint64(m.User.Size()))
		n3, err := m.User.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Region) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.Region)))
		i += copy(data[i:], m.Region)
	}
	if len(m.VpcId) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.VpcId)))
		i += copy(data[i:], m.VpcId)
	}
	if len(m.SubnetId) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.SubnetId)))
		i += copy(data[i:], m.SubnetId)
	}
	if len(m.InstanceSize) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.InstanceSize)))
		i += copy(data[i:], m.InstanceSize)
	}
	if len(m.SubnetRouting) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.SubnetRouting)))
		i += copy(data[i:], m.SubnetRouting)
	}
	if len(m.ExecutionGroupId) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.ExecutionGroupId)))
		i += copy(data[i:], m.ExecutionGroupId)
	}
	return i, nil
}

func (m *LaunchStackResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LaunchStackResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StackId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.StackId)))
		i += copy(data[i:], m.StackId)
	}
	return i, nil
}

func (m *AuthenticateBastionRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthenticateBastionRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Password) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintKeelhaul(data, i, uint64(len(m.Password)))
		i += copy(data[i:], m.Password)
	}
	return i, nil
}

func (m *AuthenticateBastionResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *AuthenticateBastionResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		data[i] = 0x8
		i++
		if m.Success {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Keelhaul(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Keelhaul(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintKeelhaul(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedFilter(r randyKeelhaul, easy bool) *Filter {
	this := &Filter{}
	this.Key = randStringKeelhaul(r)
	this.Value = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListBastionStatesRequest(r randyKeelhaul, easy bool) *ListBastionStatesRequest {
	this := &ListBastionStatesRequest{}
	v1 := r.Intn(10)
	this.CustomerIds = make([]string, v1)
	for i := 0; i < v1; i++ {
		this.CustomerIds[i] = randStringKeelhaul(r)
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(5)
		this.Filters = make([]*Filter, v2)
		for i := 0; i < v2; i++ {
			this.Filters[i] = NewPopulatedFilter(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListBastionStatesResponse(r randyKeelhaul, easy bool) *ListBastionStatesResponse {
	this := &ListBastionStatesResponse{}
	if r.Intn(10) != 0 {
		v3 := r.Intn(5)
		this.BastionStates = make([]*opsee.BastionState, v3)
		for i := 0; i < v3; i++ {
			this.BastionStates[i] = opsee.NewPopulatedBastionState(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScanVpcsRequest(r randyKeelhaul, easy bool) *ScanVpcsRequest {
	this := &ScanVpcsRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.Region = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedScanVpcsResponse(r randyKeelhaul, easy bool) *ScanVpcsResponse {
	this := &ScanVpcsResponse{}
	if r.Intn(10) != 0 {
		this.Region = opsee3.NewPopulatedRegion(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLaunchStackRequest(r randyKeelhaul, easy bool) *LaunchStackRequest {
	this := &LaunchStackRequest{}
	if r.Intn(10) != 0 {
		this.User = opsee1.NewPopulatedUser(r, easy)
	}
	this.Region = randStringKeelhaul(r)
	this.VpcId = randStringKeelhaul(r)
	this.SubnetId = randStringKeelhaul(r)
	this.InstanceSize = randStringKeelhaul(r)
	this.SubnetRouting = randStringKeelhaul(r)
	this.ExecutionGroupId = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLaunchStackResponse(r randyKeelhaul, easy bool) *LaunchStackResponse {
	this := &LaunchStackResponse{}
	this.StackId = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthenticateBastionRequest(r randyKeelhaul, easy bool) *AuthenticateBastionRequest {
	this := &AuthenticateBastionRequest{}
	this.Id = randStringKeelhaul(r)
	this.Password = randStringKeelhaul(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedAuthenticateBastionResponse(r randyKeelhaul, easy bool) *AuthenticateBastionResponse {
	this := &AuthenticateBastionResponse{}
	this.Success = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyKeelhaul interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneKeelhaul(r randyKeelhaul) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringKeelhaul(r randyKeelhaul) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneKeelhaul(r)
	}
	return string(tmps)
}
func randUnrecognizedKeelhaul(r randyKeelhaul, maxFieldNumber int) (data []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		data = randFieldKeelhaul(data, r, fieldNumber, wire)
	}
	return data
}
func randFieldKeelhaul(data []byte, r randyKeelhaul, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		data = encodeVarintPopulateKeelhaul(data, uint64(v5))
	case 1:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		ll := r.Intn(100)
		data = encodeVarintPopulateKeelhaul(data, uint64(ll))
		for j := 0; j < ll; j++ {
			data = append(data, byte(r.Intn(256)))
		}
	default:
		data = encodeVarintPopulateKeelhaul(data, uint64(key))
		data = append(data, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return data
}
func encodeVarintPopulateKeelhaul(data []byte, v uint64) []byte {
	for v >= 1<<7 {
		data = append(data, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	data = append(data, uint8(v))
	return data
}
func (m *Filter) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	return n
}

func (m *ListBastionStatesRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.CustomerIds) > 0 {
		for _, s := range m.CustomerIds {
			l = len(s)
			n += 1 + l + sovKeelhaul(uint64(l))
		}
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovKeelhaul(uint64(l))
		}
	}
	return n
}

func (m *ListBastionStatesResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.BastionStates) > 0 {
		for _, e := range m.BastionStates {
			l = e.Size()
			n += 1 + l + sovKeelhaul(uint64(l))
		}
	}
	return n
}

func (m *ScanVpcsRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	return n
}

func (m *ScanVpcsResponse) Size() (n int) {
	var l int
	_ = l
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	return n
}

func (m *LaunchStackRequest) Size() (n int) {
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.VpcId)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.SubnetId)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.InstanceSize)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.SubnetRouting)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.ExecutionGroupId)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	return n
}

func (m *LaunchStackResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.StackId)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	return n
}

func (m *AuthenticateBastionRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovKeelhaul(uint64(l))
	}
	return n
}

func (m *AuthenticateBastionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func sovKeelhaul(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKeelhaul(x uint64) (n int) {
	return sovKeelhaul(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Filter) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBastionStatesRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBastionStatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBastionStatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerIds = append(m.CustomerIds, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &Filter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBastionStatesResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBastionStatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBastionStatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BastionStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BastionStates = append(m.BastionStates, &opsee.BastionState{})
			if err := m.BastionStates[len(m.BastionStates)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanVpcsRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanVpcsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanVpcsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScanVpcsResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScanVpcsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScanVpcsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &opsee3.Region{}
			}
			if err := m.Region.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LaunchStackRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaunchStackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaunchStackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &opsee1.User{}
			}
			if err := m.User.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VpcId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VpcId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InstanceSize = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubnetRouting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubnetRouting = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionGroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionGroupId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LaunchStackResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LaunchStackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LaunchStackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateBastionRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateBastionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateBastionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeelhaul
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticateBastionResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticateBastionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticateBastionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKeelhaul(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeelhaul
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeelhaul(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeelhaul
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeelhaul
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKeelhaul
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKeelhaul
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKeelhaul(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKeelhaul = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeelhaul   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorKeelhaul = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x7e, 0xd3, 0x8f, 0xc4, 0x1d, 0x37, 0x79, 0xcb, 0x16, 0x8a, 0xeb, 0x4a, 0xfd, 0x30, 0xaa,
	0xa8, 0x10, 0xaa, 0x4b, 0x38, 0x20, 0x2a, 0x71, 0xa0, 0x87, 0x42, 0xa1, 0x27, 0x47, 0x7c, 0x88,
	0x03, 0x95, 0xbd, 0x99, 0x26, 0x56, 0x13, 0xdb, 0x78, 0x77, 0x5b, 0xca, 0xcf, 0xe1, 0xc4, 0x4f,
	0xe0, 0xc8, 0x11, 0x89, 0x0b, 0x3f, 0x01, 0xf8, 0x15, 0x48, 0x5c, 0x58, 0xef, 0xae, 0x4d, 0x21,
	0x69, 0x85, 0xc4, 0x61, 0xa5, 0x9d, 0x99, 0xe7, 0x79, 0x66, 0x76, 0x66, 0x6c, 0x68, 0x1d, 0x21,
	0x0e, 0xfa, 0xa1, 0x18, 0x6c, 0x66, 0x79, 0xca, 0x53, 0x32, 0x9d, 0x66, 0x0c, 0xd1, 0xdd, 0xea,
	0xc5, 0xbc, 0x2f, 0xa2, 0x4d, 0x9a, 0x0e, 0x7d, 0xe5, 0xf1, 0x55, 0x38, 0x12, 0x87, 0xda, 0x54,
	0x96, 0xbe, 0x6a, 0xa2, 0xbb, 0xfd, 0x57, 0x0c, 0x7e, 0x9a, 0x21, 0xf3, 0x79, 0x3c, 0x44, 0xc6,
	0xc3, 0x61, 0x66, 0xb8, 0xb6, 0x34, 0xe8, 0x91, 0x31, 0x36, 0x46, 0x84, 0xa2, 0x90, 0xc5, 0xd4,
	0x67, 0xb4, 0x8f, 0xc3, 0xd0, 0x17, 0x0c, 0x73, 0x83, 0xbc, 0x71, 0x31, 0x32, 0xc7, 0x5e, 0x9c,
	0x26, 0x06, 0x7b, 0xeb, 0x62, 0x6c, 0x78, 0xc2, 0x7c, 0xa4, 0x6d, 0x5d, 0x9f, 0xa6, 0x78, 0x5b,
	0x50, 0xdf, 0x8d, 0x07, 0x1c, 0x73, 0x32, 0x07, 0x93, 0x47, 0x78, 0xea, 0xd4, 0x56, 0x6b, 0x1b,
	0x33, 0x41, 0x71, 0x25, 0x97, 0x61, 0xfa, 0x38, 0x1c, 0x08, 0x74, 0x26, 0x94, 0x4f, 0x1b, 0xde,
	0x21, 0x38, 0xfb, 0x31, 0xe3, 0x3b, 0x21, 0xe3, 0x32, 0x73, 0x87, 0x87, 0x1c, 0x59, 0x80, 0xaf,
	0x84, 0x7c, 0x2c, 0x59, 0x83, 0x59, 0x2a, 0x18, 0x4f, 0x87, 0x98, 0x1f, 0xc4, 0x5d, 0x26, 0xc5,
	0x26, 0x25, 0xd1, 0x2e, 0x7d, 0x7b, 0x5d, 0x46, 0xae, 0x43, 0xe3, 0x50, 0x25, 0x64, 0x52, 0x76,
	0x72, 0xc3, 0x6e, 0x37, 0x37, 0x75, 0x87, 0x75, 0x19, 0x41, 0x19, 0xf5, 0x9e, 0xc1, 0xe2, 0x98,
	0x3c, 0x2c, 0x4b, 0x13, 0x86, 0x64, 0x1b, 0x5a, 0x91, 0x0e, 0x1c, 0x30, 0x15, 0x51, 0xa9, 0xec,
	0xf6, 0xbc, 0x11, 0x3b, 0xcb, 0x0a, 0x9a, 0xd1, 0x59, 0x0d, 0xef, 0x11, 0xfc, 0xdf, 0xa1, 0x61,
	0xf2, 0x34, 0xa3, 0x55, 0xdd, 0x2b, 0x30, 0x55, 0xb4, 0x5c, 0x3d, 0xde, 0x6e, 0xdb, 0x46, 0xe4,
	0x89, 0x74, 0x05, 0x2a, 0x40, 0x16, 0xa0, 0xae, 0x3b, 0xed, 0x4c, 0xa9, 0x5e, 0x18, 0xcb, 0xbb,
	0x0b, 0x73, 0xbf, 0xb4, 0x4c, 0x6d, 0xeb, 0x15, 0x56, 0xcb, 0x95, 0x0f, 0x0c, 0x94, 0xb3, 0xa2,
	0xfe, 0xa8, 0x01, 0xd9, 0x0f, 0x45, 0x42, 0xfb, 0x9d, 0x62, 0x31, 0xfe, 0xb5, 0x14, 0x72, 0x05,
	0xea, 0xc7, 0x19, 0x95, 0x6d, 0x77, 0xa6, 0xcd, 0xb8, 0x32, 0xba, 0xd7, 0x25, 0x4b, 0x30, 0xc3,
	0x44, 0x94, 0x20, 0x2f, 0x22, 0x75, 0x15, 0xb1, 0xb4, 0x43, 0x06, 0xaf, 0x41, 0x33, 0x4e, 0x64,
	0x03, 0x13, 0x8a, 0x07, 0x2c, 0x7e, 0x83, 0x4e, 0x43, 0x01, 0x66, 0x4b, 0x67, 0x47, 0xfa, 0xe4,
	0x7b, 0x5a, 0x46, 0x21, 0x4f, 0x05, 0x8f, 0x93, 0x9e, 0x63, 0x29, 0x54, 0x53, 0x7b, 0x03, 0xed,
	0x24, 0x37, 0x81, 0xe0, 0x6b, 0xa4, 0x42, 0x0d, 0xa5, 0x27, 0xa1, 0x59, 0x91, 0x71, 0x46, 0x41,
	0xe7, 0xaa, 0xc8, 0x83, 0x22, 0xb0, 0xd7, 0x95, 0x7b, 0x37, 0xff, 0xdb, 0xe3, 0x4d, 0xef, 0x16,
	0xc1, 0x52, 0x9f, 0x49, 0x41, 0xd5, 0x9b, 0xd8, 0x50, 0xb6, 0x64, 0x3c, 0x04, 0xf7, 0xbe, 0xe0,
	0x7d, 0x4c, 0x78, 0x4c, 0xe5, 0x1c, 0xcd, 0x84, 0xcb, 0xb6, 0xb5, 0x60, 0xa2, 0xa2, 0xc8, 0x1b,
	0x71, 0xc1, 0xca, 0x42, 0xc6, 0x4e, 0xd2, 0xbc, 0x6b, 0xd6, 0xb7, 0xb2, 0xbd, 0x3b, 0xb0, 0x34,
	0x56, 0xc9, 0xd4, 0xe0, 0x40, 0x83, 0x09, 0x4a, 0x91, 0x31, 0xa5, 0x67, 0x05, 0xa5, 0xd9, 0xfe,
	0x34, 0x01, 0xd6, 0x63, 0xf3, 0x2b, 0x21, 0xcf, 0xe1, 0xd2, 0xc8, 0x7e, 0x92, 0x15, 0x33, 0xaf,
	0xf3, 0xbe, 0x10, 0x77, 0xf5, 0x7c, 0x80, 0x4e, 0xef, 0xfd, 0x47, 0xee, 0x81, 0x55, 0x2e, 0x15,
	0x59, 0x30, 0xf8, 0x3f, 0x36, 0xd6, 0xbd, 0x3a, 0xe2, 0xaf, 0xe8, 0xbb, 0x60, 0x9f, 0x69, 0x2d,
	0x59, 0x2c, 0x33, 0x8e, 0xec, 0x9a, 0xeb, 0x8e, 0x0b, 0x55, 0x3a, 0x2f, 0x61, 0x7e, 0x4c, 0x9b,
	0xc8, 0x9a, 0x21, 0x9d, 0x3f, 0x0c, 0xd7, 0xbb, 0x08, 0x52, 0xea, 0xef, 0xac, 0x7f, 0xff, 0xba,
	0x5c, 0x7b, 0xf7, 0x6d, 0xb9, 0xf6, 0x5e, 0x9e, 0x8f, 0xf2, 0x7c, 0x96, 0xe7, 0x8b, 0x3c, 0x1f,
	0xde, 0xae, 0xd4, 0x5e, 0x34, 0xe4, 0xae, 0x1f, 0xc7, 0x14, 0xa3, 0xba, 0xfa, 0x51, 0xdd, 0xfe,
	0x19, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x9a, 0xa5, 0xff, 0xc5, 0x05, 0x00, 0x00,
}
